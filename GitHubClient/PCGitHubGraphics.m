//
//  PCGitHubGraphics.m
//  GitHubClient
//
//  Created by Richard Lichkus on 7/14/14.
//  Copyright (c) 2014 CleverKnot LLC. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "PCGitHubGraphics.h"


@implementation PCGitHubGraphics

#pragma mark Cache

static UIColor* _loginBlueColor = nil;
static UIColor* _loginBlueColor2 = nil;

static PCGradient* _loginBlue = nil;

static UIImage* _imageOfThreeBarMenu = nil;
static UIImage* _imageOfUser = nil;
static UIImage* _imageOfRepo = nil;
static UIImage* _imageOfDisabledButton = nil;
static UIImage* _imageOfEnabledButton = nil;
static UIImage* _imageOfLocked = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _loginBlueColor = [UIColor colorWithRed: 0 green: 0.527 blue: 1 alpha: 1];
    _loginBlueColor2 = [UIColor colorWithRed: 0.05 green: 0 blue: 1 alpha: 1];

    // Gradients Initialization
    CGFloat loginBlueLocations[] = {0, 0.46, 1};
    _loginBlue = [PCGradient gradientWithColors: @[PCGitHubGraphics.loginBlueColor, [UIColor colorWithRed: 0.025 green: 0.264 blue: 1 alpha: 1], PCGitHubGraphics.loginBlueColor2] locations: loginBlueLocations];

}

#pragma mark Colors

+ (UIColor*)loginBlueColor { return _loginBlueColor; }
+ (UIColor*)loginBlueColor2 { return _loginBlueColor2; }

#pragma mark Gradients

+ (PCGradient*)loginBlue { return _loginBlue; }

#pragma mark Drawing Methods

+ (void)drawThreeBarMenu;
{

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(5, 7, 21, 3)];
    [UIColor.grayColor setFill];
    [rectanglePath fill];


    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(5, 13, 21, 3)];
    [UIColor.grayColor setFill];
    [rectangle2Path fill];


    //// Rectangle 3 Drawing
    UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRect: CGRectMake(5, 19, 21, 3)];
    [UIColor.grayColor setFill];
    [rectangle3Path fill];
}

+ (void)drawUser;
{

    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(9, 4, 11, 10)];
    [UIColor.whiteColor setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];


    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(5, 16, 19, 11) byRoundingCorners: UIRectCornerTopLeft | UIRectCornerTopRight cornerRadii: CGSizeMake(5.5, 5.5)];
    [rectanglePath closePath];
    [UIColor.whiteColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];
}

+ (void)drawRepo;
{

    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(8.5, 9.5)];
    [bezierPath addLineToPoint: CGPointMake(3.5, 14.5)];
    [UIColor.whiteColor setStroke];
    bezierPath.lineWidth = 1;
    [bezierPath stroke];


    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = UIBezierPath.bezierPath;
    [bezier2Path moveToPoint: CGPointMake(3.5, 14.5)];
    [bezier2Path addLineToPoint: CGPointMake(8.5, 19.5)];
    [UIColor.whiteColor setStroke];
    bezier2Path.lineWidth = 1;
    [bezier2Path stroke];


    //// Bezier 3 Drawing
    UIBezierPath* bezier3Path = UIBezierPath.bezierPath;
    [bezier3Path moveToPoint: CGPointMake(21.5, 9.5)];
    [bezier3Path addLineToPoint: CGPointMake(26.5, 14.5)];
    [UIColor.whiteColor setStroke];
    bezier3Path.lineWidth = 1;
    [bezier3Path stroke];


    //// Bezier 4 Drawing
    UIBezierPath* bezier4Path = UIBezierPath.bezierPath;
    [bezier4Path moveToPoint: CGPointMake(26.5, 14.5)];
    [bezier4Path addLineToPoint: CGPointMake(21.5, 19.5)];
    [UIColor.whiteColor setStroke];
    bezier4Path.lineWidth = 1;
    [bezier4Path stroke];


    //// Bezier 5 Drawing
    UIBezierPath* bezier5Path = UIBezierPath.bezierPath;
    [bezier5Path moveToPoint: CGPointMake(18.5, 8.5)];
    [bezier5Path addCurveToPoint: CGPointMake(12.5, 20.5) controlPoint1: CGPointMake(12.5, 20.5) controlPoint2: CGPointMake(12.5, 20.5)];
    [UIColor.whiteColor setStroke];
    bezier5Path.lineWidth = 1;
    [bezier5Path stroke];
}

+ (void)drawDisabledButton;
{

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 240, 40) cornerRadius: 5];
    [UIColor.grayColor setFill];
    [rectanglePath fill];
}

+ (void)drawEnabledButton;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 240, 40) cornerRadius: 5];
    CGContextSaveGState(context);
    [rectanglePath addClip];
    CGContextDrawLinearGradient(context, PCGitHubGraphics.loginBlue.CGGradient, CGPointMake(120, -0), CGPointMake(120, 40), 0);
    CGContextRestoreGState(context);
}

+ (void)drawLocked;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 15, 18);

    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(-6, -4.5, 12, 9) cornerRadius: 1];
    [UIColor.whiteColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];

    CGContextRestoreGState(context);


    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(11.25, 9.5)];
    [bezierPath addCurveToPoint: CGPointMake(12.35, 7.03) controlPoint1: CGPointMake(11.25, 8.6) controlPoint2: CGPointMake(11.62, 7.71)];
    [bezierPath addCurveToPoint: CGPointMake(17.65, 7.03) controlPoint1: CGPointMake(13.81, 5.66) controlPoint2: CGPointMake(16.19, 5.66)];
    [bezierPath addCurveToPoint: CGPointMake(18.75, 9.5) controlPoint1: CGPointMake(18.38, 7.71) controlPoint2: CGPointMake(18.75, 8.6)];
    [UIColor.whiteColor setStroke];
    bezierPath.lineWidth = 1;
    [bezierPath stroke];


    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = UIBezierPath.bezierPath;
    [bezier2Path moveToPoint: CGPointMake(11.25, 9.5)];
    [bezier2Path addLineToPoint: CGPointMake(11.25, 13.5)];
    [UIColor.whiteColor setStroke];
    bezier2Path.lineWidth = 1;
    [bezier2Path stroke];


    //// Bezier 3 Drawing
    UIBezierPath* bezier3Path = UIBezierPath.bezierPath;
    [bezier3Path moveToPoint: CGPointMake(11.5, 16.5)];
    [bezier3Path addCurveToPoint: CGPointMake(18.5, 16.5) controlPoint1: CGPointMake(18.5, 16.5) controlPoint2: CGPointMake(18.5, 16.5)];
    [UIColor.whiteColor setStroke];
    bezier3Path.lineWidth = 1;
    [bezier3Path stroke];


    //// Bezier 4 Drawing
    UIBezierPath* bezier4Path = UIBezierPath.bezierPath;
    [bezier4Path moveToPoint: CGPointMake(11.5, 19.5)];
    [bezier4Path addCurveToPoint: CGPointMake(18.5, 19.5) controlPoint1: CGPointMake(18.5, 19.5) controlPoint2: CGPointMake(18.5, 19.5)];
    [UIColor.whiteColor setStroke];
    bezier4Path.lineWidth = 1;
    [bezier4Path stroke];


    //// Bezier 5 Drawing
    UIBezierPath* bezier5Path = UIBezierPath.bezierPath;
    [bezier5Path moveToPoint: CGPointMake(18.75, 9.5)];
    [bezier5Path addLineToPoint: CGPointMake(18.75, 13.5)];
    [UIColor.whiteColor setStroke];
    bezier5Path.lineWidth = 1;
    [bezier5Path stroke];
}

#pragma mark Generated Images

+ (UIImage*)imageOfThreeBarMenu;
{
    if (_imageOfThreeBarMenu)
        return _imageOfThreeBarMenu;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), NO, 0.0f);
    [PCGitHubGraphics drawThreeBarMenu];
    _imageOfThreeBarMenu = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfThreeBarMenu;
}

+ (UIImage*)imageOfUser;
{
    if (_imageOfUser)
        return _imageOfUser;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), NO, 0.0f);
    [PCGitHubGraphics drawUser];
    _imageOfUser = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfUser;
}

+ (UIImage*)imageOfRepo;
{
    if (_imageOfRepo)
        return _imageOfRepo;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), NO, 0.0f);
    [PCGitHubGraphics drawRepo];
    _imageOfRepo = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfRepo;
}

+ (UIImage*)imageOfDisabledButton;
{
    if (_imageOfDisabledButton)
        return _imageOfDisabledButton;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(240, 40), NO, 0.0f);
    [PCGitHubGraphics drawDisabledButton];
    _imageOfDisabledButton = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfDisabledButton;
}

+ (UIImage*)imageOfEnabledButton;
{
    if (_imageOfEnabledButton)
        return _imageOfEnabledButton;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(240, 40), NO, 0.0f);
    [PCGitHubGraphics drawEnabledButton];
    _imageOfEnabledButton = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfEnabledButton;
}

+ (UIImage*)imageOfLocked;
{
    if (_imageOfLocked)
        return _imageOfLocked;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), NO, 0.0f);
    [PCGitHubGraphics drawLocked];
    _imageOfLocked = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfLocked;
}

#pragma mark Customization Infrastructure

- (void)setThreeBarMenuTargets: (NSArray*)threeBarMenuTargets
{
    _threeBarMenuTargets = threeBarMenuTargets;

    for (id target in self.threeBarMenuTargets)
        [target setImage: PCGitHubGraphics.imageOfThreeBarMenu];
}

- (void)setUserTargets: (NSArray*)userTargets
{
    _userTargets = userTargets;

    for (id target in self.userTargets)
        [target setImage: PCGitHubGraphics.imageOfUser];
}

- (void)setRepoTargets: (NSArray*)repoTargets
{
    _repoTargets = repoTargets;

    for (id target in self.repoTargets)
        [target setImage: PCGitHubGraphics.imageOfRepo];
}

- (void)setDisabledButtonTargets: (NSArray*)disabledButtonTargets
{
    _disabledButtonTargets = disabledButtonTargets;

    for (id target in self.disabledButtonTargets)
        [target setImage: PCGitHubGraphics.imageOfDisabledButton];
}

- (void)setEnabledButtonTargets: (NSArray*)enabledButtonTargets
{
    _enabledButtonTargets = enabledButtonTargets;

    for (id target in self.enabledButtonTargets)
        [target setImage: PCGitHubGraphics.imageOfEnabledButton];
}

- (void)setLockedTargets: (NSArray*)lockedTargets
{
    _lockedTargets = lockedTargets;

    for (id target in self.lockedTargets)
        [target setImage: PCGitHubGraphics.imageOfLocked];
}


@end



@interface PCGradient ()
{
    CGGradientRef _CGGradient;
}
@end

@implementation PCGradient

- (instancetype)initWithColors: (NSArray*)colors locations: (const CGFloat*)locations
{
    self = super.init;
    if (self)
    {
        CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
        NSMutableArray* cgColors = NSMutableArray.array;
        for (UIColor* color in colors)
            [cgColors addObject: (id)color.CGColor];

        _CGGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)cgColors, locations);
        CGColorSpaceRelease(colorSpace);
    }
    return self;
}

+ (instancetype)gradientWithColors: (NSArray*)colors locations: (const CGFloat*)locations
{
    return [self.alloc initWithColors: colors locations: locations];
}

+ (instancetype)gradientWithStartingColor: (UIColor*)startingColor endingColor: (UIColor*)endingColor
{
    CGFloat locations[] = {0, 1};
    return [self.alloc initWithColors: @[startingColor, endingColor] locations: locations];
}

- (void)dealloc
{
    CGGradientRelease(_CGGradient);
}

@end
